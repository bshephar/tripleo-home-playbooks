- block:
  - file:
      path: '{{ item }}'
      serole: object_r
      setype: cert_t
      seuser: system_u
      state: directory
    name: Create dirs for certificates and keys
    with_items:
    - /etc/pki/tls/certs/httpd
    - /etc/pki/tls/private/httpd
  - include_role:
      name: linux-system-roles.certificate
    vars:
      certificate_requests:
      - ca: ipa
        dns: '{{ fqdn_ctlplane }}'
        key_size: '2048'
        name: httpd-ctlplane
        principal: HTTP/{{ fqdn_ctlplane }}@{{ idm_realm }}
        run_after: 'cp /etc/pki/tls/certs/httpd-ctlplane.crt /etc/pki/tls/certs/httpd/httpd-ctlplane.crt

          cp /etc/pki/tls/private/httpd-ctlplane.key /etc/pki/tls/private/httpd/httpd-ctlplane.key

          pkill -USR1 httpd

          '
      - ca: ipa
        dns: '{{ fqdn_storage }}'
        key_size: '2048'
        name: httpd-storage
        principal: HTTP/{{ fqdn_storage }}@{{ idm_realm }}
        run_after: 'cp /etc/pki/tls/certs/httpd-storage.crt /etc/pki/tls/certs/httpd/httpd-storage.crt

          cp /etc/pki/tls/private/httpd-storage.key /etc/pki/tls/private/httpd/httpd-storage.key

          pkill -USR1 httpd

          '
      - ca: ipa
        dns: '{{ fqdn_storage_mgmt }}'
        key_size: '2048'
        name: httpd-storage_mgmt
        principal: HTTP/{{ fqdn_storage_mgmt }}@{{ idm_realm }}
        run_after: 'cp /etc/pki/tls/certs/httpd-storage_mgmt.crt /etc/pki/tls/certs/httpd/httpd-storage_mgmt.crt

          cp /etc/pki/tls/private/httpd-storage_mgmt.key /etc/pki/tls/private/httpd/httpd-storage_mgmt.key

          pkill -USR1 httpd

          '
      - ca: ipa
        dns: '{{ fqdn_internal_api }}'
        key_size: '2048'
        name: httpd-internal_api
        principal: HTTP/{{ fqdn_internal_api }}@{{ idm_realm }}
        run_after: 'cp /etc/pki/tls/certs/httpd-internal_api.crt /etc/pki/tls/certs/httpd/httpd-internal_api.crt

          cp /etc/pki/tls/private/httpd-internal_api.key /etc/pki/tls/private/httpd/httpd-internal_api.key

          pkill -USR1 httpd

          '
      - ca: ipa
        dns: '{{ fqdn_external }}'
        key_size: '2048'
        name: httpd-external
        principal: HTTP/{{ fqdn_external }}@{{ idm_realm }}
        run_after: 'cp /etc/pki/tls/certs/httpd-external.crt /etc/pki/tls/certs/httpd/httpd-external.crt

          cp /etc/pki/tls/private/httpd-external.key /etc/pki/tls/private/httpd/httpd-external.key

          pkill -USR1 httpd

          '
  name: Certificate generation
  when:
  - step|int == 1
  - enable_internal_tls
- import_role:
    name: tripleo_container_tag
  name: Cinder Volume tag container image for pacemaker
  vars:
    container_image: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-cinder-volume:current-tripleo
    container_image_latest: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-cinder-volume:pcmklatest
  when: step|int == 1
- block:
  - name: Check if rsyslog exists
    register: rsyslog_config
    shell: systemctl is-active rsyslog
  - block:
    - blockinfile:
        content: 'if $syslogfacility-text == ''{{facility}}'' and $programname ==
          ''haproxy'' then -/var/log/containers/haproxy/haproxy.log

          & stop

          '
        create: true
        path: /etc/rsyslog.d/openstack-haproxy.conf
      name: Forward logging to haproxy.log file
      register: logconfig
      vars:
        facility: local0
    - name: restart rsyslog service after logging conf change
      service:
        name: rsyslog
        state: restarted
      when: logconfig is changed
    when:
    - rsyslog_config is changed
    - rsyslog_config.rc == 0
  name: Configure rsyslog for HAproxy container managed by Pacemaker
  when: step|int == 1
- import_role:
    name: tripleo_container_tag
  name: HAproxy tag container image for pacemaker
  vars:
    container_image: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-haproxy:current-tripleo
    container_image_latest: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-haproxy:pcmklatest
  when: step|int == 1
- include_role:
    name: tripleo_lvmfilter
  name: Run lvmfilter role
  when:
  - step|int == 1
- block:
  - include_role:
      name: linux-system-roles.certificate
    vars:
      certificate_requests:
      - ca: ipa
        dns:
        - '{{fqdn_internal_api}}'
        - '{{cloud_names.cloud_name_internal_api}}'
        key_size: '2048'
        name: mysql
        principal: mysql/{{fqdn_internal_api}}@{{idm_realm}}
  name: Certificate generation
  when:
  - step|int == 1
  - enable_internal_tls
- import_role:
    name: tripleo_container_tag
  name: MySQL tag container image for pacemaker
  vars:
    container_image: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-mariadb:current-tripleo
    container_image_latest: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-mariadb:pcmklatest
  when: step|int == 1
- include_role:
    name: tripleo_nvdimm
  name: manage PMEM namespaces for vPMEM
  vars:
    tripleo_nvdimm_pmem_namespaces: ''
  when:
  - step|int == 1
  - tripleo_nvdimm_pmem_namespaces != ''
- block:
  - name: is KSM enabled
    set_fact:
      compute_ksm_enabled: false
  - block:
    - become: true
      failed_when: false
      name: Check for ksm
      register: ksm_service_check
      shell: systemctl is-active ksm.service || systemctl is-enabled ksm.service
    - name: disable KSM services
      register: ksmdisabled
      service:
        enabled: false
        name: '{{ item }}'
        state: stopped
      when:
      - ksm_service_check.rc is defined
      - ksm_service_check.rc == 0
      with_items:
      - ksm.service
      - ksmtuned.service
    - command: echo 2 >/sys/kernel/mm/ksm/run
      name: delete PageKSM after disable ksm on compute
      when:
      - ksm_service_check.rc is defined
      - ksm_service_check.rc == 0
      - ksmdisabled is changed
    name: disable KSM on compute
    when: not compute_ksm_enabled|bool
  - block:
    - name: make sure package providing ksmtuned is installed (RHEL8 or CentOS8)
      package:
        name: qemu-kvm-common
        state: present
      when:
      - ansible_facts['distribution_major_version'] is version('8', '==')
    - name: enable ksmtunded
      service:
        enabled: true
        name: '{{ item }}'
        state: started
      with_items:
      - ksm.service
      - ksmtuned.service
    name: enable KSM on compute
    when: compute_ksm_enabled|bool
  name: enable/disable ksm
  when:
  - step|int == 1
- block:
  - include_role:
      name: linux-system-roles.certificate
    vars:
      certificate_requests:
      - ca: ipa
        dns: '{{fqdn_internal_api}}'
        key_size: '2048'
        name: ovn_controller
        principal: ovn_controller/{{fqdn_internal_api}}@{{idm_realm}}
  name: Certificate generation
  when:
  - step|int == 1
  - enable_internal_tls
- import_role:
    name: tripleo_container_tag
  name: OVN DBS tag container image for pacemaker
  vars:
    container_image: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-ovn-northd:current-tripleo
    container_image_latest: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-ovn-northd:pcmklatest
  when: step|int == 1
- block:
  - include_role:
      name: linux-system-roles.certificate
    vars:
      certificate_requests:
      - ca: ipa
        dns: '{{fqdn_internal_api}}'
        key_size: '2048'
        name: ovn_dbs
        principal: ovn_dbs/{{fqdn_internal_api}}@{{idm_realm}}
  name: Certificate generation
  when:
  - step|int == 1
  - enable_internal_tls
- block:
  - include_role:
      name: linux-system-roles.certificate
    vars:
      certificate_requests:
      - ca: ipa
        dns: '{{fqdn_internal_api}}'
        key_size: '2048'
        name: ovn_metadata
        principal: ovn_metadata/{{fqdn_internal_api}}@{{idm_realm}}
  name: Certificate generation
  when:
  - step|int == 1
  - enable_internal_tls
- block:
  - include_role:
      name: linux-system-roles.certificate
    vars:
      certificate_requests:
      - ca: ipa
        dns: '{{fqdn_internal_api}}'
        key_size: '2048'
        name: rabbitmq
        principal: rabbitmq/{{fqdn_internal_api}}@{{idm_realm}}
        run_after: "container_name=$({{container_cli}} ps --format=\\{\\{.Names\\\
          }\\} | grep -w -E 'rabbitmq(-bundle-.*-[0-9]+)?')\nservice_crt=\"/etc/pki/tls/certs/rabbitmq.crt\"\
          \nservice_key=\"/etc/pki/tls/private/rabbitmq.key\"\nif echo \"$container_name\"\
          \ | grep -q \"^rabbitmq-bundle\"; then\n  # lp#1917868: Do not use podman\
          \ cp with HA containers as they get\n  # frozen temporarily and that can\
          \ make pacemaker operation fail.\n  tar -c \"$service_crt\" \"$service_key\"\
          \ | {{container_cli}} exec -i \"$container_name\" tar -C / -xv\n  # no need\
          \ to update the mount point, because pacemaker\n  # recreates the container\
          \ when it's restarted\nelse\n  # Refresh the cert at the mount-point\n \
          \ {{container_cli}} cp $service_crt \"$container_name:/var/lib/kolla/config_files/src-tls/$service_crt\"\
          \n  # Refresh the key at the mount-point\n  {{container_cli}} cp $service_key\
          \ \"$container_name:/var/lib/kolla/config_files/src-tls/$service_key\"\n\
          \  # Copy the new cert from the mount-point to the real path\n  {{container_cli}}\
          \ exec -u root \"$container_name\" cp \"/var/lib/kolla/config_files/src-tls$service_crt\"\
          \ \"$service_crt\"\n  # Copy the new key from the mount-point to the real\
          \ path\n  {{container_cli}} exec -u root \"$container_name\" cp \"/var/lib/kolla/config_files/src-tls$service_key\"\
          \ \"$service_key\"\nfi\n# Set appropriate permissions\n{{container_cli}}\
          \ exec -u root \"$container_name\" chown rabbitmq:rabbitmq \"$service_crt\"\
          \n{{container_cli}} exec -u root \"$container_name\" chown rabbitmq:rabbitmq\
          \ \"$service_key\"\n# Trigger a pem cache clear in RabbitMQ to read the\
          \ new certificates\n{{container_cli}} exec \"$container_name\" rabbitmqctl\
          \ eval \"ssl:clear_pem_cache().\"\n"
  name: Certificate generation
  when:
  - step|int == 1
  - enable_internal_tls
- import_role:
    name: tripleo_container_tag
  name: RabbitMQ tag container image for pacemaker
  vars:
    container_image: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-rabbitmq:current-tripleo
    container_image_latest: tripleo-director.ctlplane.localdomain:8787/tripleomastercentos9/openstack-rabbitmq:pcmklatest
  when: step|int == 1
- block:
  - become: true
    containers.podman.podman_image:
      force: true
      name: '{{ prefetch_image }}'
      validate_certs: false
    delay: 5
    loop: '{{ lookup(''template'', tripleo_role_name + ''/docker_config.yaml'', errors=''ignore'')
      | default(''{}'', True) | from_yaml | recursive_get_key_from_dict(key=''image'')
      | unique }}'
    loop_control:
      loop_var: prefetch_image
    name: Pre-fetch all the containers
    register: result
    retries: 5
    until: result is succeeded
  when:
  - (step|int) == 1
- include_role:
    name: tripleo_container_manage
    tasks_from: shutdown.yml
  name: Manage tripleo container services
  when:
  - (step|int) == 1
- block:
  - include_role:
      name: linux-system-roles.certificate
    vars:
      certificate_requests:
      - ca: ipa
        dns:
        - '{{fqdn_internal_api}}'
        - '{{cloud_names.cloud_name_internal_api}}'
        key_size: '2048'
        name: redis
        principal: redis/{{fqdn_internal_api}}@{{idm_realm}}
        run_after: 'container_name=$({{container_cli}} ps --format=\{\{.Names\}\}
          | grep redis_tls_proxy)

          service_crt="/etc/pki/tls/certs/redis.crt"

          service_key="/etc/pki/tls/private/redis.key"

          # Copy the new cert from the mount-point to the real path

          {{container_cli}} exec "$container_name" cp "/var/lib/kolla/config_files/src-tls$service_crt"
          "$service_crt"

          # Copy the new cert from the mount-point to the real path

          {{container_cli}} exec "$container_name" cp "/var/lib/kolla/config_files/src-tls$service_key"
          "$service_key"

          # Set appropriate permissions

          {{container_cli}} exec "$container_name" chown memcached:memcached "$service_crt"

          {{container_cli}} exec "$container_name" chown memcached:memcached "$service_key"

          # Trigger a reload for stunnel to read the new certificate

          {{container_cli}} exec pkill -o -HUP stunnel

          '
  name: Certificate generation
  when:
  - step|int == 1
  - enable_internal_tls
- block:
  - name: Check if rsyslog exists
    register: swift_rsyslog_config
    shell: systemctl is-active rsyslog
  - copy:
      content: '# Fix for https://bugs.launchpad.net/tripleo/+bug/1776180

        local2.*                 /var/log/containers/swift/swift.log

        &                        stop

        '
      dest: /etc/rsyslog.d/openstack-swift.conf
    name: Forward logging to swift.log file
    register: swift_logconfig
    when:
    - swift_rsyslog_config is defined
    - swift_rsyslog_config.rc == 0
  - name: Restart rsyslogd service after logging conf change
    service:
      name: rsyslog
      state: restarted
    when:
    - swift_logconfig is defined
    - swift_logconfig is changed
  name: Configure rsyslog for swift
  when:
  - step|int == 1
