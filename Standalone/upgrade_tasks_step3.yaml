- block:
  - name: Get container cinder_volume image
    set_fact:
      cinder_volume_image: quay.io/tripleomastercentos9/openstack-cinder-volume:current-tripleo
      cinder_volume_image_latest: quay.io/tripleomastercentos9/openstack-cinder-volume:pcmklatest
  - command: '{{container_cli}} pull {{cinder_volume_image}}'
    delay: 3
    name: Pull latest cinder_volume images
    register: result
    retries: 3
    until: result.rc == 0
  - failed_when: false
    name: Get previous cinder_volume image id
    register: old_cinder_volume_image_id
    shell: '{{container_cli}} inspect --format ''{{''{{''}}.Id{{''}}''}}'' {{cinder_volume_image_latest}}'
  - name: Get new cinder_volume image id
    register: new_cinder_volume_image_id
    shell: '{{container_cli}} inspect --format ''{{''{{''}}.Id{{''}}''}}'' {{cinder_volume_image}}'
  - include_role:
      name: tripleo_container_tag
    name: Retag pcmklatest to latest cinder_volume image
    vars:
      container_image: '{{cinder_volume_image}}'
      container_image_latest: '{{cinder_volume_image_latest}}'
    when:
    - old_cinder_volume_image_id.stdout != new_cinder_volume_image_id.stdout
  name: Retag the pacemaker image if containerized
  when:
  - step|int == 3
- block:
  - name: Get container haproxy image
    set_fact:
      haproxy_image: quay.io/tripleomastercentos9/openstack-haproxy:current-tripleo
      haproxy_image_latest: quay.io/tripleomastercentos9/openstack-haproxy:pcmklatest
  - command: '{{container_cli}} pull {{haproxy_image}}'
    delay: 3
    name: Pull latest haproxy images
    register: result
    retries: 3
    until: result.rc == 0
  - failed_when: false
    name: Get previous haproxy image id
    register: old_haproxy_image_id
    shell: '{{container_cli}} inspect --format ''{{''{{''}}.Id{{''}}''}}'' {{haproxy_image_latest}}'
  - name: Get new haproxy image id
    register: new_haproxy_image_id
    shell: '{{container_cli}} inspect --format ''{{''{{''}}.Id{{''}}''}}'' {{haproxy_image}}'
  - include_role:
      name: tripleo_container_tag
    name: Retag pcmklatest to latest haproxy image
    vars:
      container_image: '{{haproxy_image}}'
      container_image_latest: '{{haproxy_image_latest}}'
    when:
    - old_haproxy_image_id.stdout != new_haproxy_image_id.stdout
  name: Retag the pacemaker image if containerized
  when:
  - step|int == 3
- block:
  - include_role:
      name: tripleo_persist
      tasks_from: persist.yml
    name: Persist mysql data
    vars:
      tripleo_persist_dir: /var/lib/mysql
  tags:
  - never
  - system_upgrade
  - system_upgrade_prepare
  vars:
    mysql_upgrade_persist: false
  when:
  - step|int == 3
  - mysql_upgrade_persist
- block:
  - name: Get container galera image
    set_fact:
      galera_image: quay.io/tripleomastercentos9/openstack-mariadb:current-tripleo
      galera_image_latest: quay.io/tripleomastercentos9/openstack-mariadb:pcmklatest
  - command: '{{container_cli}} pull {{galera_image}}'
    delay: 3
    name: Pull latest galera images
    register: result
    retries: 3
    until: result.rc == 0
  - failed_when: false
    name: Get previous galera image id
    register: old_galera_image_id
    shell: '{{container_cli}} inspect --format ''{{''{{''}}.Id{{''}}''}}'' {{galera_image_latest}}'
  - name: Get new galera image id
    register: new_galera_image_id
    shell: '{{container_cli}} inspect --format ''{{''{{''}}.Id{{''}}''}}'' {{galera_image}}'
  - include_role:
      name: tripleo_container_tag
    name: Retag pcmklatest to latest galera image
    vars:
      container_image: '{{galera_image}}'
      container_image_latest: '{{galera_image_latest}}'
    when:
    - old_galera_image_id.stdout != new_galera_image_id.stdout
  name: Retag the pacemaker image if containerized
  when:
  - step|int == 3
- block:
  - name: Mysql upgrade script
    set_fact:
      mysql_upgrade_script: "kolla_set_configs\nif mysqladmin ping --silent; then\
        \ exit 0; fi\nupgraded_ver=$(cat /var/lib/mysql/mysql_upgrade_info 2>/dev/null\
        \ || true)\nmysql_ver=$(mysql --version | awk -F'[ ,]*' '{print $5}')\nif\
        \ [ \"${upgraded_ver}\" = \"${mysql_ver}\" ]; then\n    echo \"mysql already\
        \ upgraded\"\n    exit 0\nfi\nchown -R mysql:mysql /var/lib/mysql\nchown -R\
        \ mysql:mysql /var/log/mysql\nmysqld_safe --user=mysql --wsrep-provider=none\
        \ --skip-networking --wsrep-on=off --log-error=/var/log/mysql/mysqld-upgrade.log\
        \ &\n\n#!/usr/bin/bash\n\nset -e\n\n# Wait until we know the mysql server\
        \ is up and responding\ntimeout ${DB_MAX_TIMEOUT:-60} /bin/bash -c 'until\
        \ mysqladmin -uroot ping 2>/dev/null; do sleep 1; done'\n\n# After an upgrade,\
        \ make sure that the running mysql had a chance to\n# update its data table\
        \ on disk.\nmysql_upgrade\n\n# Upgrade to 10.3: the default table row format\
        \ changed from COMPACT\n# to DYNAMIC, so upgrade the existing tables.\ncompact_tables=$(mysql\
        \ -se 'SELECT CONCAT(\"`\",TABLE_SCHEMA,\"`.`\",TABLE_NAME,\"`\") FROM information_schema.tables\
        \ WHERE ENGINE = \"InnoDB\" and ROW_FORMAT = \"Compact\";');\nfor i in $compact_tables;\
        \ do echo converting row format of table $i; mysql -e \"ALTER TABLE $i ROW_FORMAT=DYNAMIC;\"\
        ; done;\n\nmysqladmin shutdown"
  - name: Bind mounts for temporary container
    set_fact:
      mysql_upgrade_db_bind_mounts:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/pki/ca-trust/extracted:/etc/pki/ca-trust/extracted:ro
      - /etc/pki/ca-trust/source/anchors:/etc/pki/ca-trust/source/anchors:ro
      - /etc/pki/tls/certs/ca-bundle.crt:/etc/pki/tls/certs/ca-bundle.crt:ro
      - /etc/pki/tls/certs/ca-bundle.trust.crt:/etc/pki/tls/certs/ca-bundle.trust.crt:ro
      - /etc/pki/tls/cert.pem:/etc/pki/tls/cert.pem:ro
      - /dev/log:/dev/log
      - /etc/puppet:/etc/puppet:ro
      - /var/lib/kolla/config_files/mysql.json:/var/lib/kolla/config_files/config.json:rw,z
      - /var/lib/config-data/puppet-generated/mysql:/var/lib/kolla/config_files/src:ro,z
      - /var/lib/mysql:/var/lib/mysql:rw,z
      - /var/log/containers/mysql:/var/log/mysql:rw,z
  - environment:
      UPGRADE_SCRIPT: '{{ mysql_upgrade_script }}'
    name: Upgrade Mysql database from a temporary container
    shell: '{{ container_cli }} run --rm --log-driver=k8s-file --log-opt path=/var/log/containers/mysql/db-upgrade.log
      \ -u root --net=host -e "KOLLA_CONFIG_STRATEGY=COPY_ALWAYS" -v {{ mysql_upgrade_db_bind_mounts
      | join('' -v '')}} "quay.io/tripleomastercentos9/openstack-mariadb:pcmklatest"
      /bin/bash -ecx "$UPGRADE_SCRIPT"'
  name: Check and upgrade Mysql database after major version upgrade
  when: step|int == 3
- block:
  - name: Get container rabbitmq image
    set_fact:
      rabbitmq_image: quay.io/tripleomastercentos9/openstack-rabbitmq:current-tripleo
      rabbitmq_image_latest: quay.io/tripleomastercentos9/openstack-rabbitmq:pcmklatest
  - command: '{{container_cli}} pull {{rabbitmq_image}}'
    delay: 3
    name: Pull latest rabbitmq images
    register: result
    retries: 3
    until: result.rc == 0
  - failed_when: false
    name: Get previous rabbitmq image id
    register: old_rabbitmq_image_id
    shell: '{{container_cli}} inspect --format ''{{''{{''}}.Id{{''}}''}}'' {{rabbitmq_image_latest}}'
  - name: Get new rabbitmq image id
    register: new_rabbitmq_image_id
    shell: '{{container_cli}} inspect --format ''{{''{{''}}.Id{{''}}''}}'' {{rabbitmq_image}}'
  - include_role:
      name: tripleo_container_tag
    name: Retag pcmklatest to latest rabbitmq image
    vars:
      container_image: '{{rabbitmq_image}}'
      container_image_latest: '{{rabbitmq_image_latest}}'
    when:
    - old_rabbitmq_image_id.stdout != new_rabbitmq_image_id.stdout
  name: Retag the pacemaker image if containerized
  when:
  - step|int == 3
- name: Gather missing facts
  setup:
    gather_subset:
    - '!all'
    - '!min'
    - distribution
  tags:
  - always
  when: ansible_facts['distribution'] is not defined or ansible_facts['distribution_major_version']
    is not defined
- name: Set leapp facts
  set_fact:
    upgrade_leapp_command_options: ''
    upgrade_leapp_debug: true
    upgrade_leapp_devel_skip: ''
    upgrade_leapp_enabled: "{{ _upgradeLeappEnabled | bool and\n   ansible_facts['distribution']\
      \ == 'RedHat' and\n   ansible_facts['distribution_major_version'] is version('7',\
      \ '==') }}"
    upgrade_leapp_post_reboot_delay: 120
    upgrade_leapp_reboot_timeout: 3600
  tags:
  - always
  vars:
    _upgradeLeappEnabled: false
- block:
  - name: remove all OpenStack packages
    shell: "yum -y remove *el7ost* \\\n  mariadb-server* -- \\\n  -*openvswitch* \\\
      \n  -python2-babel \\\n  -python2-dateutil \\\n  -python2-ipaddress \\\n  -python2-jinja2\
      \ \\\n  -python2-markupsafe \\\n  -python2-six\n"
  - name: install leapp
    package:
      name: leapp
      state: latest
  - lineinfile:
      line: '{{ item }}'
      path: /etc/leapp/transaction/to_remove
    loop: '{{ pkg_to_remove }}'
    name: add packages into Leapp's to_remove file
    vars:
      pkg_to_remove: []
  - lineinfile:
      line: '{{ item }}'
      path: /etc/leapp/transaction/to_install
    loop: '{{ pkg_to_install }}'
    name: add packages into Leapp's to_install file
    vars:
      pkg_to_install: []
  - name: check sshd_config file
    register: sshd_config_result
    stat:
      path: /etc/ssh/sshd_config
  - lineinfile:
      line: PermitRootLogin without-password
      path: /etc/ssh/sshd_config
      regexp: ^(# *)?PermitRootLogin
    name: add PermitRootLogin option for leapp
  name: system_upgrade_prepare step 3
  tags:
  - never
  - system_upgrade
  - system_upgrade_prepare
  when:
  - step|int == 3
  - upgrade_leapp_enabled
- name: Check for os-net-config upgrade
  register: os_net_config_need_upgrade
  shell: yum check-upgrade | awk '/os-net-config/{print}'
  when: step|int == 3
- name: Check that os-net-config has configuration
  register: stat_config_json
  stat:
    get_attributes: false
    get_checksum: false
    get_mime: false
    path: /etc/os-net-config/config.json
  when: step|int == 3
- block:
  - name: Upgrade os-net-config
    package: name=os-net-config state=latest
  - changed_when: os_net_config_upgrade.rc == 2
    command: os-net-config --no-activate -c /etc/os-net-config/config.json -v --detailed-exit-codes
    failed_when: os_net_config_upgrade.rc not in [0,2]
    name: take new os-net-config parameters into account now
    register: os_net_config_upgrade
  when:
  - step|int == 3
  - os_net_config_need_upgrade.stdout
  - stat_config_json.stat.exists
- name: Update all packages
  vars:
    skip_package_update: false
  when:
  - step|int == 3
  - not skip_package_update|bool
  yum:
    exclude: ansible
    name: '*'
    state: latest
